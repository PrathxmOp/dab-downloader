name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag_name: ${{ github.event.inputs.version }} # Use the version from workflow_dispatch
    steps:
    - uses: actions/checkout@v3

    - name: Get version from workflow_dispatch input
      run: |
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.x'

    - name: Download Go Modules
      run: |
        go mod tidy
        go mod download

    - name: Build for Linux
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o dab-downloader-linux-amd64
    - name: Build for Windows
      run: |
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o dab-downloader-windows-amd64.exe
    - name: Build for macOS
      run: |
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o dab-downloader-macos-amd64

    - name: Build for Linux (ARM64)
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o dab-downloader-linux-arm64

    - name: Create and Push Git Tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        TAG_NAME=${{ env.VERSION }}
        # Check if tag already exists on remote
        if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
          git tag $TAG_NAME
          git push origin $TAG_NAME
        else
          echo "Tag $TAG_NAME already exists, skipping tag creation and push."
        fi

    - name: Generate Changelog
      id: generate_changelog
      run: |
        CHANGELOG=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s (%h)")
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        body: ${{ env.CHANGELOG }}
        draft: false
        prerelease: false
        files: |
          ./dab-downloader-linux-amd64
          ./dab-downloader-windows-amd64.exe
          ./dab-downloader-macos-amd64
          ./dab-downloader-linux-arm64

    - name: Verify Release Creation
      run: |
        gh auth setup-git
        gh release list
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job to ensure TAG_NAME is available
    permissions:
      contents: read
      packages: write # To push to GitHub Packages, or adjust for Docker Hub

    steps:
    - uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          prathxm/dab-downloader:${{ needs.build.outputs.tag_name }}
          prathxm/dab-downloader:latest
